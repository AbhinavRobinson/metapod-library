generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  blog          Blog[]        @relation(name: "author")
  visits        Visit[]       @relation(name: "visits")
  comment       Comment[]
  like          Like[]
  post          Post[]
  profile       Profile?
  // permissions   Permissions[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Blog {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id], name: "author")
  authorId  String
  comment   Comment[]
  like      Like[]
  visits    Visit[]   @relation(name: "visits")
}

model Visit {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  pageUrl   String
  blog      Blog      @relation(fields: [blogId], references: [id], name: "visits")
  blogId    String    
  user      User      @relation(fields: [userId], references: [id], name: "visits")
  userId    String    
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    String
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  bio       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Permissions {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  executionLevel String
  // users     User[]
}
